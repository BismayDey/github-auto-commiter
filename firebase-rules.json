{
  "rules": {
    "users": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid",
        "githubUsername": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "githubToken": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "repositories": {
          "$repoId": {
            ".validate": "newData.hasChildren(['name', 'description', 'defaultBranch'])"
          }
        },
        "updatedAt": {
          ".validate": "newData.val() === now"
        }
      }
    },
    "commitConfig": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid",
        "repository": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "branch": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "frequency": {
          ".validate": "newData.isString() && ['hourly', 'daily', 'weekly'].includes(newData.val())"
        },
        "commitMessage": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "startDate": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "endDate": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "updatedAt": {
          ".validate": "newData.val() === now"
        }
      }
    },
    "commitStatus": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid",
        "active": {
          ".validate": "newData.isBoolean()"
        },
        "totalCommits": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "lastCommit": {
          ".validate": "newData.isString() || newData.val() === null"
        },
        "nextCommit": {
          ".validate": "newData.isString() || newData.val() === null"
        },
        "updatedAt": {
          ".validate": "newData.val() === now"
        }
      }
    },
    "commits": {
      "$commitId": {
        ".read": "data.child('userId').val() === auth.uid",
        ".write": "newData.child('userId').val() === auth.uid",
        "status": {
          ".validate": "newData.isString() && ['success', 'failed', 'pending'].includes(newData.val())"
        },
        "commitHash": {
          ".validate": "newData.isString() || newData.val() === null"
        },
        "message": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "error": {
          ".validate": "!newData.exists() || newData.isString()"
        },
        "updatedAt": {
          ".validate": "newData.val() === now"
        }
      }
    }
  }
}